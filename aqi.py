# -*- coding: utf-8 -*-
"""AQI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sF9AhLZRpuh0Vv0qsNKJCRtwqNnhDtgS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
file_path = 'mini project5.csv'
data = pd.read_csv(file_path)

# Data Preprocessing
data = data.drop(columns=['Date'])

# Convert categorical columns 'LOCATIONS' and 'Status' to numerical values
label_encoder_loc = LabelEncoder()
label_encoder_status = LabelEncoder()
data['LOCATIONS'] = label_encoder_loc.fit_transform(data['LOCATIONS'])
data['Status'] = label_encoder_status.fit_transform(data['Status'])

# Replace non-numeric values with NaN
data['AQI'] = pd.to_numeric(data['AQI'], errors='coerce')

# Drop rows with NaN values in the 'AQI' column
data = data.dropna(subset=['AQI'])

# Verify the 'AQI' column is now numeric
data['AQI'] = data['AQI'].astype(float)

# Split data into features and target variable
X = data.drop(columns=['AQI'])
y = data['AQI']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    'Random Forest': RandomForestRegressor(random_state=42),
    'XGBoost': XGBRegressor(random_state=42),
    'Linear Regression': LinearRegression()
}

results = {}

# Train and evaluate each model
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # Calculate evaluation metrics
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    results[name] = {
        'model': model,
        'mae': mae,
        'mse': mse,
        'rmse': rmse,
        'r2': r2,
        'y_pred': y_pred
    }

    print(f"Results for {name}:")
    print(f"MAE: {mae}")
    print(f"MSE: {mse}")
    print(f"RMSE: {rmse}")
    print(f"RÂ²: {r2}\n")

    # Feature importance
    if name == 'Random Forest' or name == 'XGBoost':
        feature_importances = model.feature_importances_
    elif name == 'Linear Regression':
        feature_importances = np.abs(model.coef_)

    feature_importance_df = pd.DataFrame({
        'Feature': X.columns,
        'Importance': feature_importances
    }).sort_values(by='Importance', ascending=False)

    print(f"Feature Importance for {name}:")
    print(feature_importance_df)
    print("\n")

# Plotting predicted AQI vs Temp for each model
plt.figure(figsize=(15, 5))

for i, (name, result) in enumerate(results.items(), 1):
    plt.subplot(1, 3, i)
    plt.scatter(X_test['Temp'], y_test, color='blue', label='Actual AQI')
    plt.scatter(X_test['Temp'], result['y_pred'], color='red', label='Predicted AQI')
    plt.xlabel('Temperature')
    plt.ylabel('AQI-US')
    plt.title(f"{name} Predictions")
    plt.legend()

plt.tight_layout()
plt.show()